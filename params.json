{"name":"Entrust","tagline":"Role-based Permissions for Laravel 4","body":"# Entrust (Laravel4 Package)\r\n\r\nEntrust is a succinct and flexible way to add Role-based Permissions to **Laravel4**.\r\n\r\nFirst and foremost I must give credit to the original developers of this package. Andrew Elkins (@andrewelkins) and Leroy Merlin (@zizaco) did excellent work on the fundamental design and functionality. My fork is intended to:\r\n\r\n- Remove extra components not really relevant to role & permission management (in particular, Ardent).\r\n- Add extra functionality I felt was useful and particularly suited to this package.\r\n- Make integrating the package more flexible and dynamic (eventually).\r\n\r\nWere my changes ever to be integrated back into the Zizaco version of this plugin, I think that would be lovely. Either way though, I hope to demonstrate some genuinely helpful features and options.\r\n\r\n## Quick start\r\n\r\n**PS:** Even though it's not needed. Entrust works very well with [Confide](https://github.com/Zizaco/confide) in order to eliminate repetitive tasks involving the management of users: account creation, login, logout, confirmation by e-mail, password reset, etc.\r\n\r\n[Take a look at Confide](https://github.com/Zizaco/confide)\r\n\r\n### Required setup\r\n\r\nIn the `require` key of `composer.json` file add the following\r\n\r\n    \"bbatsche/entrust\": \"~2.0\"\r\n\r\nRun the Composer update command\r\n\r\n    $ composer update\r\n\r\nIn your `config/app.php` add `'Bbatsche\\Entrust\\EntrustServiceProvider'` to the end of the `$providers` array\r\n\r\n```php\r\n'providers' => array(\r\n\r\n    'Illuminate\\Foundation\\Providers\\ArtisanServiceProvider',\r\n    'Illuminate\\Auth\\AuthServiceProvider',\r\n    ...\r\n    'Bbatsche\\Entrust\\EntrustServiceProvider',\r\n\r\n),\r\n```\r\n\r\nAt the end of `config/app.php` add `'Entrust' => 'Bbatsche\\Entrust\\EntrustFacade'` to the `$aliases` array\r\n\r\n```php\r\n'aliases' => array(\r\n\r\n    'App'        => 'Illuminate\\Support\\Facades\\App',\r\n    'Artisan'    => 'Illuminate\\Support\\Facades\\Artisan',\r\n    ...\r\n    'Entrust'    => 'Bbatsche\\Entrust\\EntrustFacade',\r\n\r\n),\r\n```\r\n\r\n## Configuration\r\n\r\nSet the property values in the `config/auth.php`. These values will be used by entrust to refer to the correct user table and model.\r\n\r\n### User relation to roles\r\n\r\nNow generate the Entrust migration\r\n\r\n    $ php artisan entrust:migration\r\n\r\nIt will generate the `<timestamp>_entrust_setup_tables.php` migration. You may now run it with the artisan migrate command:\r\n\r\n    $ php artisan migrate\r\n\r\nAfter the migration, four new tables will be present: `roles` which stores roles, `permissions` for storing permissions, and `role_user` & `permission_role` which will represent the [Many-to-Many](http://laravel.com/docs/4.2/eloquent#many-to-many) relations between `User`, `Role`, and `Permission`.\r\n\r\n### Models\r\n\r\nCreate a Role model inside `app/models/Role.php` using the following example:\r\n\r\n```php\r\n<?php\r\n\r\nuse Bbatsche\\Entrust\\EntrustRole;\r\n\r\nclass Role extends EntrustRole\r\n{\r\n\r\n}\r\n```\r\n\r\nThe `Role` model has three main attributes: `name`, `display_name`, and `description`. `name`, as you can imagine, is\r\nthe name of the Role. It is the unique key used to represent the Role in your application. For example: \"admin\",\r\n\"owner\", \"employee\". `display_name` is a human readable name for that role. It is not unique and may be used\r\nfor display purposes. For example: \"User Administrator\", \"Project Owner\", \"Widget  Co. Employee\". `description` can be\r\nused for a longer form description of the role. Both `display_name` and `description` are optional; their fields are\r\nnullable in the database.\r\n\r\nCreate a Permission model inside `app/models/Permission.php` using the following example:\r\n\r\n```php\r\n<?php\r\n\r\nuse Bbatsche\\Entrust\\EntrustPermission;\r\n\r\nclass Permission extends EntrustPermission\r\n{\r\n\r\n}\r\n```\r\n\r\nThe `Permission` model has the same three attributes as the `Role`: `name`, `display_name`, and `description`. These\r\nthree fields have the same general purpose as for your Roles, but instead applied to the Permission model.\r\n`name` is the unique name of the Permission. For example: \"create-post\", \"edit-user\", \"post-payment\",\r\n\"mailing-list-subscribe\". `display_name` is a viewer friendly version of the permission string. For example \"Create\r\nPosts\", \"Edit Users\", \"Post Payments\", \"Subscribe to mailing list\". Description can be a more detailed explanation for\r\nthe Permission. In general, it may be helpful to think of the attributes in the form of a sentence: \"The permission\r\n`display_name` allows a user to `description`.\"\r\n\r\nNext, use the `HasRole` trait in your existing `User` model. For example:\r\n\r\n```php\r\n<?php\r\n\r\nuse Bbatsche\\Entrust\\HasRole;\r\n\r\nclass User extends Eloquent\r\n{\r\n    use HasRole; // Add this trait to your user model\r\n\r\n    ...\r\n}\r\n```\r\n\r\nThis will enable the relation with `Role` and add the following methods `roles()`, `hasRole($name)`,\r\n`can($permission)`, and `ability($roles, $permissions, $options)` within your `User` model.\r\n\r\nDon't forget to dump composer autoload\r\n\r\n    $ composer dump-autoload\r\n\r\n**And you are ready to go.**\r\n\r\n## Usage\r\n\r\n### Concepts\r\nLet's start by creating the following `Role`s and `Permission`s:\r\n\r\n```php\r\n$owner = new Role();\r\n$owner->name         = 'owner';\r\n$owner->display_name = 'Project Owner'; // optional\r\n$owner->description  = 'User is the owner of a given project'; // optional\r\n$owner->save();\r\n\r\n$admin = new Role();\r\n$admin->name         = 'admin';\r\n$admin->display_name = 'User Administrator'; // optional\r\n$admin->description  = 'User is allowed to manage and edit other users'; //optional\r\n$admin->save();\r\n```\r\n\r\nNext, with both roles created let's assign them to the users. Thanks to the `HasRole` trait this is as easy as:\r\n\r\n```php\r\n$user = User::where('username', '=', 'bbatsche')->first();\r\n\r\n/* role attach alias */\r\n$user->attachRole($admin); // Parameter can be an Role object, array or id.\r\n\r\n/* OR the eloquent's original: */\r\n$user->roles()->attach($admin->id); // id only\r\n```\r\nNow we just need to add permissions to those Roles.\r\n\r\n```php\r\n$createPost = new Permission();\r\n$createPost->name         = 'create-post';\r\n$createPost->display_name = 'Create Posts'; // optional\r\n// Allow a user to...\r\n$createPost->description  = 'create new blog posts'; // optional\r\n$createPost->save();\r\n\r\n$editUser = new Permission();\r\n$editUser->name         = 'edit-user';\r\n$editUser->display_name = 'Edit Users'; // optional\r\n// Allow a user to...\r\n$editUser->description  = 'edit existing users'; // optional\r\n$editUser->save();\r\n\r\n$admin->attachPermission($createPost);\r\n// Equivalent to $admin->perms()->sync(array($createPost->id));\r\n\r\n$owner->attachPermissions(array($createPost, $editUser));\r\n// Equivalent to $owner->perms()->sync(array($createPost->id, $editUser->id));\r\n```\r\n\r\n#### Checking for Roles & Permissions\r\n\r\nNow we can check for roles and permissions simply by doing:\r\n\r\n```php\r\n$user->hasRole('owner');   // false\r\n$user->hasRole('admin');   // true\r\n$user->can('edit-user');   // false\r\n$user->can('create-post'); // true\r\n```\r\n\r\nBoth `hasRole()` and `can()` can receive an array of roles & permissions to check.\r\n\r\n```php\r\n$user->hasRole(['owner', 'admin']);       // true\r\n$user->can(['edit-user', 'create-post']); // true\r\n```\r\n\r\nBy default, if any of the roles or permissions are present for a user then the method will return true. Passing `true` as a second parameter instructs the method to require **all** of the items.\r\n\r\n```php\r\n$user->hasRole(['owner', 'admin']);             // true\r\n$user->hasRole(['owner', 'admin'], true);       // false; user does not have admin role\r\n$user->can(['edit-user', 'create-post']);       // true\r\n$user->can(['edit-user', 'create-post'], true); // false; user does not have edit-user permission\r\n```\r\n\r\nYou can have as many `Role`s as you want for each `User` and vice versa.\r\n\r\nThe `Entrust` class has shortcuts to both `can()` and `hasRole()` for the currently logged in user. The following example:\r\n\r\n```php\r\nEntrust::hasRole('role-name');\r\nEntrust::can('permission-name');\r\n```\r\n\r\nwould be identical to:\r\n\r\n```php\r\nAuth::user()->hasRole('role-name');\r\nAuth::user()->can('permission-name);\r\n```\r\n\r\n#### User Ability\r\n\r\nMore advanced checking can be done using the awesome `ability` function. It takes in three parameters (roles,\r\npermissions, options). `roles` is a set of roles to check. `permissions` is a set of permissions to check.\r\nEither of the roles or permissions variable can be a comma separated string or array.\r\n\r\n```php\r\n$user->ability(array('admin', 'owner'), array('create-post', 'edit-user'));\r\n//or\r\n$user->ability('admin,owner', 'create-post,edit-user');\r\n```\r\n\r\nThis will check whether the user has any of the provided roles and permissions. In this case it will return true\r\nsince the user is an `admin` and has the `create-post` permission.\r\n\r\nThe third parameter is an options array.\r\n\r\n```php\r\n$options = array(\r\n    'validate_all' => true | false (Default: false),\r\n    'return_type'  => boolean | array | both (Default: boolean)\r\n);\r\n```\r\n\r\n- `validate_all` is a boolean flag to set whether to check all the values for true, or to return true if at least one\r\n  role or permission is matched.\r\n- `return_type` specifies whether to return a boolean, array of checked values, or both in an array.\r\n\r\nHere's some example output.\r\n\r\n```php\r\n$options = array(\r\n    'validate_all' => true,\r\n    'return_type' => 'both'\r\n);\r\nlist($validate, $allValidations) = $user->ability(array('admin', 'owner'), array('create-post', 'edit-user'), $options);\r\n\r\n// Output\r\nvar_dump($validate);\r\nbool(false)\r\nvar_dump($allValidations);\r\narray(4) {\r\n  ['role']=>\r\n  bool(true)\r\n  ['role_2']=>\r\n  bool(false)\r\n  ['create-post']=>\r\n  bool(true)\r\n  ['edit-user']=>\r\n  bool(false)\r\n}\r\n```\r\n\r\n### Short Syntax Route Filter\r\n\r\nTo filter a route by permission or role you can call the following in your `app/filters.php`:\r\n\r\n```php\r\n// Only users with roles that have the 'manage_posts' permission will\r\n// be able to access any route within admin/post.\r\nEntrust::routeNeedsPermission('admin/post*', 'create-post');\r\n\r\n// Only owners will have access to routes within admin/advanced\r\nEntrust::routeNeedsRole('admin/advanced*', 'owner');\r\n\r\n// Optionally the second parameter can be an array of permissions or roles.\r\n// User would need to match all roles or permissions for that route.\r\nEntrust::routeNeedsPermission('admin/post*', array('create-post', 'edit-comment'));\r\n\r\nEntrust::routeNeedsRole('admin/advanced*', array('owner','writer'));\r\n```\r\n\r\nBoth of these methods accept a third parameter. If the third parameter is null then the return of a prohibited access will be `App::abort(403)`. Otherwise the third parameter will be returned. So you can use it like:\r\n\r\n```php\r\nEntrust::routeNeedsRole('admin/advanced*', 'owner', Redirect::to('/home'));\r\n```\r\n\r\nFurther more both of these methods accept a fourth parameter. It defaults to true and checks all roles/permissions\r\ngiven. If you set it to false, the function will only fail if all roles/permissions fail for that user. Useful for\r\nadmin applications where you want to allow access for multiple groups.\r\n\r\n```php\r\n// If a user has `create-post`, `edit-comment` or both they will have access.\r\nEntrust::routeNeedsPermission('admin/post*', array('create-post', 'edit-comment'), null, false);\r\n\r\n// If a user is a member of `owner`, `writer` or both they will have access.\r\nEntrust::routeNeedsRole('admin/advanced*', array('owner','writer'), null, false);\r\n\r\n// If a user is a member of `owner`, `writer` or both, or user has `create-post`, `edit-comment` they will have access.\r\n// You can set the 4th parameter to true then user must be member of Role and must has Permission.\r\nEntrust::routeNeedsRoleOrPermission(\r\n    'admin/advanced*',\r\n    array('owner', 'writer'),\r\n    array('create-post', 'edit-comment'),\r\n    null,\r\n    false\r\n);\r\n```\r\n\r\n### Route filter\r\n\r\nEntrust roles/permissions can be used in filters by simply using the `can` and `hasRole` methods from within the Facade.\r\n\r\n```php\r\nRoute::filter('manage_posts', function()\r\n{\r\n    // Checks the current user\r\n    if (!Entrust::can('create-post')) {\r\n        return Redirect::to('admin');\r\n    }\r\n});\r\n\r\n// Only users with roles that have the 'manage_posts' permission will\r\n// be able to access any admin/post route.\r\nRoute::when('admin/post*', 'manage_posts');\r\n```\r\n\r\nUsing a filter to check for a role:\r\n\r\n```php\r\nRoute::filter('owner_role', function()\r\n{\r\n    // Checks the current user\r\n    if (!Entrust::hasRole('Owner')) {\r\n        App::abort(403);\r\n    }\r\n});\r\n\r\n// Only owners will have access to routes within admin/advanced\r\nRoute::when('admin/advanced*', 'owner_role');\r\n```\r\n\r\nAs you can see `Entrust::hasRole()` and `Entrust::can()` checks if the user is logged in, and then if he or she has the\r\nrole or permission. If the user is not logged the return will also be `false`.\r\n\r\n## Troubleshooting\r\n\r\nIf you encounter an error when doing the migration that looks like:\r\n\r\n```\r\nSQLSTATE[HY000]: General error: 1005 Can't create table 'laravelbootstrapstarter.#sql-42c_f8' (errno: 150)\r\n    (SQL: alter table `role_user` add constraint role_user_user_id_foreign foreign key (`user_id`)\r\n    references `users` (`id`)) (Bindings: array ())\r\n```\r\n\r\nThen it's likely that the `id` column in your user table does not match the `user_id` column in `role_user`. Match sure\r\nboth are `INT(10)`.\r\n\r\n## License\r\n\r\nEntrust is free software distributed under the terms of the MIT license\r\n\r\n## Additional information\r\n\r\nLibrary documentation is hosted on [GitHub Pages](http://bbatsche.github.io/entrust/docs).\r\n\r\nAny questions, feel free to contact me or ask [here](http://laravel.io/forum/09-23-2014-package-zizaco-entrust)\r\n\r\nAny issues, please [report here](https://github.com/bbatsche/entrust/issues)","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}